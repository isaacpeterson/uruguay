}
return(current_service_data_element)
}
all_names_list <- lapply(seq_along(full_service_list),
function(i) (lapply(seq_along(full_service_list[[i]]),
function(j) names(full_service_list[[i]][[j]]))))
driver_names_list = c('EmpID', 'driver', 'SERV_EMPL_ID', 'Driver.No', 'Van ID')
product_names_list = c('ProductType', 'Product')
rate_names_list = c("RATE Incl GST", "JobRate", "Job Rate", "Total Paid", "Cost")
cost_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], rate_names_list, data_type = 'numerical')))
driver_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], driver_names_list, data_type = 'numerical')))
product_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], product_names_list, data_type = 'character')))
job_numbers_monthly <- lapply(seq_along(driver_data),
function(i) lapply(seq_along(driver_data[[i]]),
function(j) as.vector(table(driver_data[[i]][[j]]))))
job_numbers_yearly <- lapply(seq_along(driver_data),
function(i) as.vector(table(unlist(driver_data[[i]]))))
driver_numbers_yearly <- lapply(seq_along(driver_data),
function(i) length(unique(unlist(driver_data[[i]]))))
driver_numbers_monthly <- lapply(seq_along(driver_data),
function(i) lapply(seq_along(driver_data[[i]]),
function(j) length(unique(driver_data[[i]][[j]]))))
product_data
unique(unlist(product_data))
product_data
current_filename_set
unique(unlist(product_data))
sort(unique(unlist(product_data)))
table(unlist(product_data))
sort(table(unlist(product_data)))
sort(as.vector(table(unlist(product_data))))
as.vector(table(unlist(product_data))
)
names(table(unlist(product_data))
)
a = (table(unlist(product_data))
a
a = (table(unlist(product_data)))
names(a)
as.vector(a)
a = (table(unlist(product_data)))
sort(a)
names(a)
a
sort(a)
collated_product_data = table(unlist(product_data))
names(a)
names(a>6000)
inds_to_use = as.vector(collated_product_data) > 0.95*max(as.vector(collated_product_data))
inds_to_use
inds_to_use = as.vector(collated_product_data) > 0.80*max(as.vector(collated_product_data))
inds_to_use
inds_to_use = as.vector(collated_product_data) > 0.50*max(as.vector(collated_product_data))
inds_to_use
max(as.vector(collated_product_data))
collated_product_data
sort(collated_product_data)
inds_to_use = as.vector(collated_product_data) > 1e4
inds_to_use
a[inds_to_use]
names(a)
names(a[ind_to_use])
names(a[inds_to_use])
products_to_use = c("EXTRA CARE","RACV Extra Care","RACV Roadside Car", "RACV Total Care", "ROADSIDE CARE", "TOTAL CARE")
products_to_use
collated_product_data = table(unlist(product_data))
inds_to_use = as.vector(collated_product_data) > 1e4
product_names_to_use = c("EXTRA CARE","RACV Extra Care","RACV Roadside Car", "RACV Total Care", "ROADSIDE CARE", "TOTAL CARE")
which(names(collated_product_data) %in% product_names_to_use)
collated_product_data = table(unlist(product_data))
screened_inds_to_use = as.vector(collated_product_data) > 1e4
reimbursement_names = c("EXTRA CARE","RACV Extra Care", "RACV Total Care", "TOTAL CARE")
product_names_to_use = c("EXTRA CARE","RACV Extra Care","RACV Roadside Car", "RACV Total Care", "ROADSIDE CARE", "TOTAL CARE")
reimbursement_fraction = collated_product_data[which(names(collated_product_data) %in% reimbursement_names)]/
collated_product_data[which(names(collated_product_data) %in% product_names_to_use)]
reimbursement_fraction = sum(as.vector(collated_product_data[which(names(collated_product_data) %in% reimbursement_names)]))/
sum(as.vector(collated_product_data[which(names(collated_product_data) %in% product_names_to_use)])
)
reimbursement_fraction
collated_product_data
inds_to_use = as.vector(collated_product_data) > 100
as.vector(collated_product_data[inds_to_use])
collated_product_data[inds_to_use]
cost_data
all_names_list
collated_product_data[inds_to_use]
sum(as.vector(collated_product_data[which(names(collated_product_data) %in% product_names_to_use)]))/sum(as.vector(collated_product_data))
hist(unlist(cost_data))
hist(as.numeric(unlist(cost_data)))
cost_data
select_service_group <- function(current_service_data, current_names_list, data_type){
elements_to_use = which(names(current_service_data) %in% current_names_list)
if (length(elements_to_use) > 0){
current_service_data_element = current_service_data[[elements_to_use]]
if (data_type == 'numeric'){
current_service_data_element = as.numeric(current_service_data_element)
}
} else {
current_service_data_element = vector()
}
return(current_service_data_element)
}
all_names_list <- lapply(seq_along(full_service_list),
function(i) (lapply(seq_along(full_service_list[[i]]),
function(j) names(full_service_list[[i]][[j]]))))
driver_names_list = c('EmpID', 'driver', 'SERV_EMPL_ID', 'Driver.No', 'Van ID')
product_names_list = c('ProductType', 'Product')
rate_names_list = c("RATE Incl GST", "JobRate", "Job Rate", "Total Paid", "Cost")
cost_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], rate_names_list, data_type = 'numeric')))
driver_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], driver_names_list, data_type = 'numeric')))
hist(as.numeric(unlist(cost_data)))
hist((unlist(cost_data)))
inds_to_use = unlist(cost_data) < 0.95*max(unlist(cost_data))
a = unlist(cost_data)
a[inds_to_use]
hist(a[inds_to_use])
all_names_list <- lapply(seq_along(full_service_list),
function(i) (lapply(seq_along(full_service_list[[i]]),
function(j) names(full_service_list[[i]][[j]]))))
driver_names_list = c('EmpID', 'driver', 'SERV_EMPL_ID', 'Driver.No', 'Van ID')
product_names_list = c('ProductType', 'Product')
rate_names_list = c("RATE Incl GST", "JobRate", "Job Rate", "Total Paid", "Cost")
cost_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], rate_names_list, data_type = 'numeric')))
driver_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], driver_names_list, data_type = 'numeric')))
product_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], product_names_list, data_type = 'character')))
job_numbers_monthly <- lapply(seq_along(driver_data),
function(i) lapply(seq_along(driver_data[[i]]),
function(j) as.vector(table(driver_data[[i]][[j]]))))
job_numbers_yearly <- lapply(seq_along(driver_data),
function(i) as.vector(table(unlist(driver_data[[i]]))))
driver_numbers_yearly <- lapply(seq_along(driver_data),
function(i) length(unique(unlist(driver_data[[i]]))))
driver_numbers_monthly <- lapply(seq_along(driver_data),
function(i) lapply(seq_along(driver_data[[i]]),
function(j) length(unique(driver_data[[i]][[j]]))))
hist(unlist(driver_numbers_monthly))
hist(unlist(driver_numbers_yearly))
unlist(driver_numbers_yearly)
unlist(job_numbers_yearly)
hist(unlist(job_numbers_yearly))
hist(unlist(job_numbers_monthly))
)collated_product_data
collated_product_data
screened_inds_to_use = as.vector(collated_product_data) > 1e4
collated_product_data[screened_inds_to_use]
a = collated_product_data[screened_inds_to_use]
sum(a[c(1, 2, 4, 6)])
sum(a = collated_product_data[screened_inds_to_use])
2392/176680
driver_numbers_yearly
driver_numbers_monthly
hist(unlist(driver_numbers_monthly))
job_numbers_monthly
hist(unlist(job_numbers_monthly))
hist(unlist(job_numbers_yearly))
all_names_list
unique(unlist(all_names_list))
parts_names_list <- c('Fuel.Parts', 'Parts and Fuel', 'Fuel', 'FUEL incl GST', 'Fuel /Parts Amt')
parts_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], parts_names_list, data_type = 'character')))
parts_data
parts_data <- lapply(seq_along(full_service_list),
function(i) lapply(seq_along(full_service_list[[i]]),
function(j) select_service_group(full_service_list[[i]][[j]], parts_names_list, data_type = 'numeric')))
unlist(parts_data)
hist(unlist(parts_data))
unlist(parts_data) >0
length(unlist(parts_data) >0)
length(unlist(!is.na(parts_data)))
is.na(parts_data)
length(!is.na(unlist(parts_data))))
length(!is.na(unlist(parts_data)))
(!is.na(unlist(parts_data)))
length(which(!is.na(unlist(parts_data))))
parts_data
inds_to_use = (which(!is.na(unlist(parts_data))))
a = unlist(parts_data)
a[inds_to_use]
length(unlist(!is.na(parts_data)))
length(which(!is.na(unlist(parts_data))))
length(which(!is.na(unlist(parts_data))))/176680
hist(unlist(job_numbers_yearly))
length(which(!is.na(unlist(parts_data))))
inds_to_use  = (which(!is.na(unlist(parts_data))))
parts_data[inds_to_use]
inds_to_use  = (which(!is.na(unlist(parts_data))))
inds_to_use
unlist(parts_data)[inds_to_use]
unlist(parts_data)[inds_to_use]
length(unlist(parts_data)[inds_to_use] <1e3)
length(which(unlist(parts_data)[inds_to_use] <1e3))
length(which(unlist(parts_data)[inds_to_use] <1e2))
length(which(unlist(parts_data)[inds_to_use] <1e1))
(table(unlist(parts_data)[inds_to_use]))
(table(unlist(parts_data)[inds_to_use]))
write.table(table(unlist(parts_data)[inds_to_use]), file = '~/Documents/Emrys_job/fuel_data.csv')
as.data.frame(table(unlist(parts_data)[inds_to_use]))
write.table(as.data.frame(table(unlist(parts_data)[inds_to_use])), '~/Documents/Emrys_job/fuel_data.csv')
write.csv(as.data.frame(table(unlist(parts_data)[inds_to_use])), '~/Documents/Emrys_job/fuel_data.csv')
collated_product_data
sort(collated_product_data)
which(names(collated_product_data) == 'CAC-BMW')
sort(collated_product_data[64:length(collated_product_data)])
write.csv(as.data.frame(sort(collated_product_data[64:length(collated_product_data)])), '~/Documents/Emrys_job/RACV_product_data.csv')
sum(as.vector(collated_product_data[which(names(collated_product_data) %in% product_names_to_use)]))/sum(as.vector(collated_product_data))
reimbursement_names = c("EXTRA CARE","RACV Extra Care", "RACV Total Care", "TOTAL CARE")
product_names_to_use = c("EXTRA CARE","RACV Extra Care", "RACV Roadside Care", "RACV Roadside Car", "RACV Total Care", "ROADSIDE CARE", "TOTAL CARE")
inds_to_use = as.vector(collated_product_data) > 100
reimbursement_fraction = sum(as.vector(collated_product_data[which(names(collated_product_data) %in% reimbursement_names)]))/
sum(as.vector(collated_product_data[which(names(collated_product_data) %in% product_names_to_use)]))
reimbursement_fraction
sum(as.vector(collated_product_data[which(names(collated_product_data) %in% reimbursement_names)]))
sum(as.vector(collated_product_data[which(names(collated_product_data) %in% product_names_to_use)]))
reimbursement_fraction = sum(as.vector(collated_product_data[which(names(collated_product_data) %in% reimbursement_names)]))/
sum(as.vector(collated_product_data[which(names(collated_product_data) %in% product_names_to_use)]))
reimbursement_fraction
0.924709097
table(unlist(job_numbers_yearly))
hist(unlist(job_numbers_yearly))
res <- hist(unlist(job_numbers_yearly))
res <- hist(unlist(job_numbers_yearly))
res
res <- hist(unlist(job_numbers_yearly), breaks=20)
res
res <- hist(unlist(job_numbers_yearly), breaks=100)
res
res <- hist(unlist(job_numbers_yearly), breaks=1000)
res
length(unlist(job_numbers_yearly))
length(unlist(job_numbers_yearly) == 0)
length(which(unlist(job_numbers_yearly) == 0))
length(which(unlist(job_numbers_yearly) == 5))
length(which(unlist(job_numbers_yearly) < 5))
length(which(unlist(job_numbers_yearly) < 50))
length(which(unlist(job_numbers_yearly) < 20))
quantile(unlist(job_numbers_yearly))
outliers(unlist(job_numbers_yearly))
6357^2*180
(6357*180)^2
8065  + (15980 – 9206)
8065 + (15980-9206)
6357*180*137*11
factorial(1500)/factorial(900)
factorial(4)
factorial(900)
1450/5
290*180/60
870/60
install.packages("SDMTools")
source('~/.active-rstudio-document', echo=TRUE)
a
image(a)
a
osim.run('~/GitHub/offset_simulator/user_params/initialise_params_grassland.R')
user_plot_params_file = 'plot_params_simulated_data.R'
source(user_plot_params_file)
plot_params <- initialise_plot_params()
osim.plot(plot_params, user_global_params$simulation_folder, run_number = 20, loglevel = 'TRACE')
debugSource('~/Documents/R_Codes/plot_decline_rate_space.R', echo=TRUE)
traceback()
debugSource('~/Documents/R_Codes/plot_decline_rate_space.R', echo=TRUE)
R.version()
R.Version()
debugSource('~/GitHub/Offsets_Sydney_Cumberland/load_cumberland_data.R', echo=TRUE)
debugSource('~/GitHub/Offsets_Sydney_Cumberland/load_cumberland_data.R', echo=TRUE)
Cadastre = readOGR(dsn = data_folder, layer = 'Cadastre')
rm(list = ls())
library(rgdal)
library(raster)
library(rgeos)
library(maptools)
library(abind)
library(pixmap)
library(offsetsim)
initialise_ecology_params <- function(){
ecology_params = list()
ecology_params$region_num = 1
ecology_params$region_num_x = 1
ecology_params$region_num_y = 1
ecology_params$min_eco_val = 0  #minimum allowable ecological value of smallest ecological element (pixel)
ecology_params$max_eco_val = 100 #maximum "   "     "           "
return(ecology_params)
}
build_probability_layer <- function(weight_layer, land_parcels){
inds_to_use = !is.na(weight_layer)
dev_weights = lapply(seq_along(land_parcels), function(i) mean(weight_layer[land_parcels[[i]]]))
na_vals = is.na(unlist(dev_weights))
dev_weights[na_vals] = 0
scale_factor = sum(unlist(dev_weights))
dev_weights = lapply(seq_along(dev_weights), function(i) dev_weights[[i]]/scale_factor)
return(dev_weights)
}
load_mining_raster <- function(Cumberland_mask, current_data_folder){
current_filenames <- list.files(path = current_data_folder, pattern = '.tif', all.files = FALSE,
full.names = FALSE, recursive = FALSE, ignore.case = FALSE,
include.dirs = FALSE, no.. = FALSE)
mining_raster = load_rasters(current_data_folder, current_filenames, layer_num = 1)
mining_raster <- crop(mining_raster, extent(Cumberland_mask))
mining_raster = as.matrix(mining_raster)
return(mining_raster)
}
# load_hunter_LGA <- function(Cumberland_mask, data_folder){
#
#   LGA_shp <- readOGR(dsn = paste0(data_folder, 'LGA'), layer = "5_LGAs_StudyArea")
#
#   LGA_raster <- shp_to_raster(shp = LGA_shp, raster_dims = dim(Cumberland_mask))
#
#   extent(LGA_raster) = extent(Cumberland_mask)
#
#   # define projections
#   GDA.D <- CRS("+proj=longlat +ellps=GRS80 +towgs84=0.0,0.0,0.0,0.0,0.0,0.0,0.0 +no_defs ")
#   GDA94.56 <- CRS("+proj=utm +zone=56 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
#
#   parcels_shp <- readOGR(dsn = paste0(data_folder, 'LH_property_2015'),  layer = "property")
#   parcels_shp_transform <- spTransform(parcels_shp, GDA94.56) # project to correct CRS
#   parcels_shp_cropped <- crop(parcels_shp_transform, extent(Cumberland_mask))
#   parcels_raster = shp_to_raster(shp = parcels_shp_cropped, raster_dims = dim(Cumberland_mask))
#   parcel_array = as.matrix(parcels_raster)
#   parcel_array[is.na(parcel_array)] = 0
#
#   return(parcel_array)
# }
load_saved_LGA = TRUE
use_z_layer = TRUE
sample_decline_rate = FALSE
max_eco_val = 100
mean_decline_rate = -0.02
decline_rate_std = 0.005
ecology_params <- initialise_ecology_params()
data_folder = paste0(path.expand('~'), '/offset_data/Sydney_Cumberland_Data/data/')
DEM_tif = load_rasters(data_folder, 'DEM_25m.tif', layer_num = 1)
objects_to_save = list()
Cumberland_mask = readOGR(dsn = data_folder, layer = 'Cumberland_IBRA_subregion')
Cumberland_mask = shp_to_raster(Cumberland_mask, raster_dims = dim(DEM_tif))
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
Cumberland_mask
Cumberland_mask@data
Cumberland_mask@data[, 1]
Cadastre@data[,1]
project_data_to_zone_56 <- function(shp_to_project){
# define projections
GDA.D <- CRS("+proj=longlat +ellps=GRS80 +towgs84=0.0,0.0,0.0,0.0,0.0,0.0,0.0 +no_defs ")
GDA94.56 <- CRS("+proj=utm +zone=56 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
shp_transform <- spTransform(shp_to_project, GDA94.56) # project to correct CRS
return(shp_transform)
}
project_data_to_zone_56 <- function(shp_to_project){
# define projections
GDA.D <- CRS("+proj=longlat +ellps=GRS80 +towgs84=0.0,0.0,0.0,0.0,0.0,0.0,0.0 +no_defs ")
GDA94.56 <- CRS("+proj=utm +zone=56 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
shp_transform <- spTransform(shp_to_project, GDA94.56) # project to correct CRS
return(shp_transform)
}
Cumberland_mask = readOGR(dsn = data_folder, layer = 'Cumberland_IBRA_subregion')
Cumberland_mask = project_data_to_zone_56(Cumberland_mask)
image(Cumberland_mask)
Cumberland_mask = shp_to_raster(Cumberland_mask, raster_dims = dim(DEM_tif))
extent(Cumberland_mask) = extent(DEM_tif)
image(Cumberland_mask)
data_folder = paste0(path.expand('~'), '/offset_data/Sydney_Cumberland_Data/data/')
DEM_tif = load_rasters(data_folder, 'DEM_25m.tif', layer_num = 1)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
image(DEM_tif)
image(Cumberland_mask)
crop(DEM_tif)
Cumberland_mask = readOGR(dsn = data_folder, layer = 'Cumberland_IBRA_subregion')
Cumberland_mask = project_data_to_zone_56(Cumberland_mask)
Cumberland_mask = shp_to_raster(Cumberland_mask, raster_dims = dim(DEM_tif))
image(Cumberland_mask)
extent(Cumberland_mask)
extent(DEM_tif)
a = crop(DEM_tif, extent(Cumberland_mask))
image(a)
a = crop(DEM_tif, extent(Cumberland_mask))
Priority_growth_region = readOGR(dsn = data_folder, layer = 'Priority_Growth_Areas')
Priority_growth_region = project_data_to_zone_56(Priority_growth_region)
Priority_growth_region = shp_to_raster(Priority_growth_region, raster_dims = dim(Cumberland_mask))
image(Priority_growth_region)
extent(Priority_growth_region)
Priority_growth_region = readOGR(dsn = data_folder, layer = 'Priority_Growth_Areas')
Priority_growth_region = project_data_to_zone_56(Priority_growth_region)
Priority_growth_region = crop(Priority_growth_region, extent(Cumberland_mask))
Priority_growth_region = shp_to_raster(Priority_growth_region, raster_dims = dim(Cumberland_mask))
image(Priority_growth_region)
Priority_growth_region = readOGR(dsn = data_folder, layer = 'Priority_Growth_Areas')
Priority_growth_region = project_data_to_zone_56(Priority_growth_region)
Priority_growth_region = crop(Priority_growth_region, extent(Cumberland_mask))
riority_growth_region = readOGR(dsn = data_folder, layer = 'Priority_Growth_Areas')
Priority_growth_region = project_data_to_zone_56(Priority_growth_region)
extent(Cumberland_mask)
Priority_growth_region = readOGR(dsn = data_folder, layer = 'Priority_Growth_Areas')
Priority_growth_region = project_data_to_zone_56(Priority_growth_region)
extent(Priority_growth_region)
extent(Priority_growth_region) = extent(Cumberland_mask)
Cumberland_mask = readOGR(dsn = data_folder, layer = 'Cumberland_IBRA_subregion')
Cumberland_mask = project_data_to_zone_56(Cumberland_mask)
class(Cumberland_mask)
extent(Cumberland_mask)
Priority_growth_region = readOGR(dsn = data_folder, layer = 'Priority_Growth_Areas')
Priority_growth_region = project_data_to_zone_56(Priority_growth_region)
extent(Cumberland_mask)
extent(Priority_growth_region)
a = crop(Priority_growth_region, extent(Cumberland_mask), snap = 'near')
raster::extend(Priority_growth_region, extent(Cumberland_mask))
Priority_growth_region@bbox
Priority_growth_region@bbox <- as.matrix(extent(Cumberland_mask))
Priority_growth_region
image(Priority_growth_region)
image(as.matrix(Priority_growth_region))
Priority_growth_region = shp_to_raster(Priority_growth_region, raster_dims = dim(Cumberland_mask))
image(Priority_growth_region)
load_saved_LGA = TRUE
use_z_layer = TRUE
sample_decline_rate = FALSE
max_eco_val = 100
mean_decline_rate = -0.02
decline_rate_std = 0.005
ecology_params <- initialise_ecology_params()
data_folder = paste0(path.expand('~'), '/offset_data/Sydney_Cumberland_Data/Projected_Cumberland_data')
DEM_tif = load_rasters(data_folder, 'DEM_25m1.tif', layer_num = 1)
DEM_tif = load_rasters(data_folder, 'DEM_25m1.tif', layer_num = 1)
Cumberland_mask = readOGR(dsn = data_folder, layer = 'projected_cumberland_subregion')
Cumberland_mask = project_data_to_zone_56(Cumberland_mask)
Cumberland_mask = readOGR(dsn = data_folder, layer = 'projected_cumberland_subregion')
image(Cumberland_mask)
Cumberland_mask
Priority_growth_region = readOGR(dsn = data_folder, layer = 'projected_priority_growth_areas')
Cumberland_mask = readOGR(dsn = data_folder, layer = 'projected_cumberland_subregion')
Priority_growth_region = readOGR(dsn = data_folder, layer = 'projected_priority_growth_areas')
Priority_growth_region = readOGR(dsn = paste0(data_folder, 'projected_priority_growth_areas'), layer = 'projected_priority_growth_areas')
Priority_growth_region = readOGR(dsn = data_folder, layer = 'projected_priority_growth_areas')
Cumberland_mask = readOGR(dsn = data_folder, layer = 'projected_cumberland_subregion')
Mcarthur_draft_veg = readOGR(dsn = data_folder, layer = 'projected_macarthur')
Cumberland_mask
Mcarthur_draft_veg = readOGR(dsn = data_folder, layer = 'projected_macarthur')
Macarthur_draft_veg = readOGR(dsn = data_folder, layer = 'projected_macarthur')
Macarthur_draft_veg
Cumberland_mask
Cadastre = readOGR(dsn = data_folder, layer = 'projected_cadastre')
dim(DEM_tif)
image(DEM_tif)
DEM_tif
Cadaster = shp_to_raster(Cadastre, raster_dims = dim(DEM_tif))
Cadastre
Cadastre = readOGR(dsn = data_folder, layer = 'Cadastre')
raster_dims = dim(DEM_tif)
r = raster(ncol=raster_dims[2], nrow=raster_dims[1])
extent(r) <- extent(Cadastre)
parcel_object = rasterize(Cadastre, r, field = Cadastre@data[,1], update = TRUE, updateValue = "NA")
Cadastre = readOGR(dsn = data_folder, layer = 'Cadastre')
data_folder
Cadastre = readOGR(dsn = data_folder, layer = 'projected_cadastre')
raster_dims = dim(DEM_tif)
r = raster(ncol=raster_dims[2], nrow=raster_dims[1])
extent(r) <- extent(Cadastre)
parcel_object = rasterize(Cadastre, r, field = Cadastre@data[,1], update = TRUE, updateValue = "NA")
extent(parcel_object)
image(parcel_object)
extent(Cumberland_mask)
image(Cumberland_mask)
Cumberland_mask = shp_to_raster(Cumberland_mask, raster_dims)
extent(Cumberland_mask)
image(Cumberland_mask)
image(parcel_object)
Priority_growth_region = readOGR(dsn = data_folder, layer = 'projected_priority_growth_areas')
source('~/GitHub/offsets_workshop/plot_elicitations.R', echo=TRUE)
setwd('~/GitHub/uruguay/')
